-- SQL Commands 
-- Mastering full stack data analytics
-- 1st - Assignment Questions with Answers


-- 1. Identify the primary keys and foreign keys in maven movies db. Discuss the differences
-- select * from film; -- film_id - PK
-- select * from film_actor; -- film_id - FK

describe film; -- describe command will show the table properties this is the way we can identify the which is primary key and foreign key

-- difference between PK & FK

-- A primary key generally focuses on the uniqueness of the table. It is a column or a set of columns that uniquely distinguishes every row in the database. It means it should not have any duplicate value. Also, it doesn’t contain a NULL value.

-- A foreign key is generally used to build a relationship between the two tables. The major purpose of the foreign key is to sustain data integrity between two separate instances of an entity. The foreign key accepts multiple null values. Tables can allow more than one foreign key.
  



-- 2. List all details of actors
SELECT 
    *
FROM
    actor;


-- 3. List all customer information from DB. 
 SELECT 
    *
FROM
    customer;
    

-- 4. List different countries. 
Select * from country;
SELECT DISTINCT
    country
FROM
    country;


-- 5. Display all active customers.
Select * from customer;
SELECT 
    first_name, last_name, active AS active_customer
FROM
    customer
WHERE
    active >= 1;
 
 
-- 6. List of all rental IDs for customer with ID 1. 
Select * from rental;
SELECT 
    rental_id
FROM
    rental
WHERE
    customer_id = 1;


-- 7. Display all the films whose rental duration is greater than 5 . 
Select * from film;
SELECT 
    title, rental_duration
FROM
    film
WHERE
    rental_duration > 5;


-- 8. List the total number of films whose replacement cost is greater than $15 and less than $20. 
Select * from film;
SELECT 
    COUNT(title)
FROM
    film
WHERE
    replacement_cost > 15
        AND replacement_cost < 20; 


-- 9. Display the count of unique first names of actors. 
Select * from actor;
SELECT DISTINCT
    COUNT(first_name)
FROM
    actor;


-- 10. Display the first 10 records from the customer table.
Select * from customer;
SELECT 
    *
FROM
    customer
LIMIT 10;
 
-- 11. Display the first 3 records from the customer table whose first name starts with ‘b’.
Select * from customer;
SELECT 
    first_name, last_name
FROM
    customer
WHERE
    first_name LIKE 'b%';


-- 12. Display the names of the first 5 movies which are rated as ‘G’. 
select * from film;
SELECT 
    title, rating
FROM
    film
WHERE
    rating = 'g'
ORDER BY rating
LIMIT 5;


-- 13. Find all customers whose first name starts with "a". 
select * from customer;
SELECT 
    first_name, last_name
FROM
    customer
WHERE
    first_name LIKE 'a%';


-- 14. Find all customers whose first name ends with "a". 
select * from customer;
SELECT 
    first_name, last_name
FROM
    customer
WHERE
    first_name LIKE '%a';


-- 15. Display the list of first 4 cities which start and end with ‘a’
select * from city;
SELECT 
    city
FROM
    city
WHERE
    city LIKE 'a%a';


-- 16. Find all customers whose first name have "NI" in any position. 
select * from customer;
SELECT 
    first_name
FROM
    customer
WHERE
    first_name LIKE '%NI%';


-- 17. Find all customers whose first name have "r" in the second position .
select * from customer;
SELECT 
    first_name
FROM
    customer
WHERE
    first_name LIKE '_r%';


-- 18. Find all customers whose first name starts with "a" and are at least 5 characters in length. 
select * from customer;
SELECT 
    first_name, last_name
FROM
    customer
WHERE
    LENGTH(first_name) = 5
        AND first_name LIKE 'a%';


-- 19. Find all customers whose first name starts with "a" and ends with "o". 
select * from customer;
SELECT 
    first_name
FROM
    customer
WHERE
    first_name LIKE 'a%o';


-- 20. Get the films with pg and pg-13 rating using IN operator. 
select * from film;
SELECT 
    *
FROM
    film
WHERE
    rating IN ('pg' , ' pg-13');


-- 21. Get the films with length between 50 to 100 using between operator.
select * from film;
SELECT 
    *
FROM
    film
WHERE
    length BETWEEN 50 AND 100;

 
-- 22. Get the top 50 actors using limit operator. 
select * from actor;
SELECT 
    first_name, last_name
FROM
    actor
ORDER BY actor_id
LIMIT 50;


-- 23. Get the distinct film ids from inventory table.
select * from inventory;
SELECT DISTINCT
    film_id
FROM
    inventory; 
